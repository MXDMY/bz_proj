/***********************************************************************
 该头文件及其源文件实现神经网络的全连接层
***********************************************************************/
#ifndef BZ_FC_H
#define BZ_FC_H

#include "bz_nn.h"

//全连接层神经网络模型结构体
typedef struct bz_fc_model
{
    bz_dbl* input;        //输入层，模型构建中不自行分配，指向外部区域
    bz_uint input_count;  //输入层神经元个数

    bz_dbl** in_layer;    //除输入层外，其他神经元层的输入
    bz_dbl** out_layer;   //除输入层外，其他神经元层的输出
    bz_uint layer_count;  //除输入层外，神经元层的总层数
    bz_uint* layer_n_arr; //除输入层外，每层神经元的个数
    bz_int (**act_func_list)(bz_dbl* , bz_uint); //激活函数列表

    bz_dbl** w;           //权重数组
    bz_uint* w_n_arr;     //每层实际权重的个数

    bz_dbl* b;            //阈值数组

    bz_dbl** pool_layer;  //反馈层，存储反向传播过程中的误差
}bz_fc_m;

/*******************************************************************************************************
 模型构建
*******************************************************************************************************/
//创建一个全连接层实例并初始化，失败返回NULL，失败原因仅为内存分配失败
bz_fc_m* bz_fc_model_create(void);

//添加输入层，请确保 input 指向内存持续有效，成功返回0，否则返回错误号
bz_int bz_fc_model_add_input(bz_fc_m* m , bz_dbl* input , bz_uint input_count);

//添加一层神经元，并设置该层的激活函数，成功返回0，否则返回错误号
bz_int bz_fc_model_add_layer(bz_fc_m* m , bz_uint count , bz_int (*act_func)(bz_dbl* , bz_uint));

//最终构建全连接模型，添加所有层后调用，成功返回0，失败返回错误号
bz_int bz_fc_model_build(bz_fc_m* m);

/*******************************************************************************************************
 参数设置
*******************************************************************************************************/
//设置模型某一层的权重参数，序号 idx 从 0 开始，成功返回0，否则返回错误号
bz_int bz_fc_model_set_w(bz_fc_m* m , bz_dbl* v , bz_uint count , bz_uint idx);

//设置模型阈值参数，成功返回 0，否则返回错误号
bz_int bz_fc_model_set_b(bz_fc_m* m , bz_dbl* v , bz_uint count);

/*******************************************************************************************************
 模型前向与反向传播
*******************************************************************************************************/
//对模型进行一次前向传播计算
void bz_fc_model_forward_calcu(bz_fc_m* m);

//对模型进行一次后向传播计算，err为结果误差对输出的偏导，rate为学习率，成功返回0，否则返回错误号
bz_int bz_fc_model_back_calcu(bz_fc_m* m , bz_dbl* err , bz_uint err_count , bz_dbl rate);


#endif